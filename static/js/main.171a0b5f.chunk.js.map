{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","memo","todos","onSelect","selectedId","className","map","id","title","completed","type","onClick","TodoFilter","filterType","onFilter","query","onSearch","onClean","value","onChange","event","currentTarget","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","selectedTodo","onClose","userId","useState","isUserLoading","setLoadingStatus","user","setUser","useEffect","getUser","userFromServer","href","email","name","App","todosFromServer","setTodosFromServer","areUsersLoaded","setFilterType","setQuery","setSelectedTodo","handleClean","useCallback","handleTodoSelect","handleTodoClose","visibleTodos","useMemo","filter","todo","condition1","toLowerCase","includes","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.171a0b5f.chunk.js","sourcesContent":["import { FC, memo } from 'react';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[],\n  selectedId: number,\n  onSelect: (id: number) => void,\n}\n\nexport const TodoList: FC<Props> = memo(\n  ({ todos, onSelect, selectedId }) => (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n\n        {\n          todos.map(({ id, title, completed }) => (\n            <tr\n              key={id}\n              data-cy=\"todo\"\n              className=\"\"\n            >\n              <td className=\"is-vcentered\">{id}</td>\n\n              {\n                completed\n                  ? (\n                    <td className=\"is-vcentered\">\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    </td>\n                  )\n                  : (<td className=\"is-vcentered\" />)\n              }\n\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={`has-text-${completed ? 'success' : 'danger'}`}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => onSelect(id)}\n                >\n                  <span className=\"icon\">\n                    <i className={`far fa-eye${selectedId === id ? '-slash' : ''}`} />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))\n        }\n      </tbody>\n    </table>\n  ),\n);\n","import { FC, memo } from 'react';\n\ninterface Props {\n  filterType: string,\n  query: string,\n  onFilter: React.Dispatch<React.SetStateAction<string>>,\n  onSearch: React.Dispatch<React.SetStateAction<string>>,\n  onClean: () => void,\n}\n\nexport const TodoFilter: FC<Props> = memo(\n  ({\n    filterType,\n    onFilter,\n    query,\n    onSearch,\n    onClean,\n  }) => (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterType}\n            onChange={(event) => onFilter(event.currentTarget.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => onSearch(event.currentTarget.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {\n            query && (\n              // eslint-disable-next-line jsx-a11y/control-has-associated-label\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={onClean}\n              />\n            )\n          }\n        </span>\n      </p>\n    </form>\n  ),\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import {\n  useState,\n  useEffect,\n  memo,\n  FC,\n} from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ninterface Props {\n  selectedTodo: Todo | null,\n  onClose: () => void,\n}\n\nexport const TodoModal: FC<Props> = memo(\n  ({ selectedTodo, onClose }) => {\n    const {\n      id,\n      title,\n      completed,\n      userId,\n    } = selectedTodo as Todo;\n\n    const [isUserLoading, setLoadingStatus] = useState(true);\n    const [user, setUser] = useState<User | null>(null);\n\n    useEffect(() => {\n      getUser(userId)\n        .then(userFromServer => {\n          setUser(userFromServer);\n          setLoadingStatus(false);\n        });\n    }, []);\n\n    return (\n      <div className=\"modal is-active\" data-cy=\"modal\">\n        <div className=\"modal-background\" />\n\n        {isUserLoading ? (\n          <Loader />\n        ) : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={onClose}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {\n                  completed\n                    ? <strong className=\"has-text-success\">Done</strong>\n                    : <strong className=\"has-text-danger\">Planned</strong>\n                }\n\n                {' by '}\n\n                <a href={`mailto:${user?.email}`}>\n                  {user?.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n","import {\n  FC,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\n\nexport const App: FC = () => {\n  const [todosFromServer, setTodosFromServer] = useState<Todo[]>([]);\n  const [areUsersLoaded, setLoadingStatus] = useState(false);\n  const [filterType, setFilterType] = useState('all');\n  const [query, setQuery] = useState('');\n  const [selectedTodo, setSelectedTodo] = useState<number>(0);\n\n  useEffect(() => {\n    getTodos()\n      .then(todos => {\n        setTodosFromServer(todos);\n        setLoadingStatus(true);\n      });\n  }, []);\n\n  const handleClean = useCallback(() => {\n    setQuery('');\n  }, []);\n\n  const handleTodoSelect = useCallback((id: number) => {\n    // const newSelectedTodo = todosFromServer\n    //   .find(todo => todo.id === id) || null;\n\n    setSelectedTodo(id);\n  }, [todosFromServer]);\n\n  const getSelectedTodo = (id: number) => (\n    todosFromServer.find(todo => todo.id === id) || null\n  );\n\n  const handleTodoClose = useCallback(() => {\n    setSelectedTodo(0);\n  }, []);\n\n  const visibleTodos = useMemo(() => (\n    todosFromServer.filter(todo => {\n      const condition1 = todo.title\n        .toLowerCase()\n        .includes(query.toLowerCase());\n\n      switch (filterType) {\n        case 'all':\n          return condition1;\n        case 'active':\n          return condition1 && !todo.completed;\n        case 'completed':\n          return condition1 && todo.completed;\n        default:\n          return true;\n      }\n    })\n  ), [todosFromServer, filterType, query]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filterType={filterType}\n                query={query}\n                onFilter={setFilterType}\n                onSearch={setQuery}\n                onClean={handleClean}\n              />\n            </div>\n\n            <div className=\"block\">\n              {\n                areUsersLoaded\n                  ? (\n                    <TodoList\n                      todos={visibleTodos}\n                      onSelect={handleTodoSelect}\n                      selectedId={selectedTodo}\n                    />\n                  )\n                  : <Loader />\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={getSelectedTodo(selectedTodo)}\n          onClose={handleTodoClose}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}