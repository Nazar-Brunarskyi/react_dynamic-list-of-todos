{"version":3,"sources":["types/filterType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterTypeEnum","TodoList","memo","todos","onSelect","selectedId","className","map","id","title","completed","type","onClick","cn","far","TodoFilter","filterType","onFilter","query","onSearch","onClean","value","onChange","event","currentTarget","all","active","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","selectedTodo","onClose","userId","useState","isUserLoading","setLoadingStatus","user","setUser","errorMessage","setErrorMessage","useEffect","getUser","userFromServer","catch","finally","href","email","name","App","todosFromServer","setTodosFromServer","areUsersLoaded","setAreUsersLoaded","setQuery","appliedQuery","setAppliedQuery","selectedTodoId","setSelectedTodoId","setFilterType","debouncedSetAppliedQuery","useCallback","debounce","handleClean","handleTodoSelect","getSelectedTodo","find","todo","handleTodoClose","visibleTodos","useMemo","filter","condition1","toLowerCase","includes","shouldTodosBeRendered","shouldErrorMessageBeRendered","queryToApply","textAlign","color","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fbdc73b8.chunk.js","sourcesContent":["export enum FilterTypeEnum {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import cn from 'classnames';\nimport { FC, memo } from 'react';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[],\n  selectedId: number,\n  onSelect: (id: number) => void,\n}\n\nexport const TodoList: FC<Props> = memo(\n  ({ todos, onSelect, selectedId }) => (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n\n        {\n          todos.map(({ id, title, completed }) => (\n            <tr\n              key={id}\n              data-cy=\"todo\"\n              className=\"\"\n            >\n              <td className=\"is-vcentered\">{id}</td>\n\n              {\n                completed\n                  ? (\n                    <td className=\"is-vcentered\">\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    </td>\n                  )\n                  : (<td className=\"is-vcentered\" />)\n              }\n\n              <td className=\"is-vcentered is-expanded\">\n                <p\n                  className={`has-text-${completed ? 'success' : 'danger'}`}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => onSelect(id)}\n                >\n                  <span className=\"icon\">\n                    <i\n                      className={cn({\n                        far: true,\n                        'fa-eye': selectedId !== id,\n                        'fa-eye-slash': selectedId === id,\n                      })}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))\n        }\n      </tbody>\n    </table>\n  ),\n);\n","import { FC, memo } from 'react';\nimport { FilterTypeEnum } from '../../types/filterType';\n\ninterface Props {\n  filterType: FilterTypeEnum,\n  query: string,\n  onFilter: React.Dispatch<React.SetStateAction<FilterTypeEnum>>,\n  onSearch: (queryToApply: string) => void,\n  onClean: () => void,\n}\n\nexport const TodoFilter: FC<Props> = memo(\n  ({\n    filterType,\n    onFilter,\n    query,\n    onSearch,\n    onClean,\n  }) => {\n    const handleSelectChange = (\n      event: React.ChangeEvent<HTMLSelectElement>,\n    ) => {\n      const { value } = event.currentTarget;\n\n      switch (value) {\n        case FilterTypeEnum.all:\n          onFilter(FilterTypeEnum.all);\n          break;\n        case FilterTypeEnum.active:\n          onFilter(FilterTypeEnum.active);\n          break;\n        case FilterTypeEnum.completed:\n          onFilter(FilterTypeEnum.completed);\n          break;\n        default:\n          break;\n      }\n    };\n\n    const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n      onSearch(event.currentTarget.value);\n    };\n\n    return (\n      <form className=\"field has-addons\">\n        <p className=\"control\">\n          <span className=\"select\">\n            <select\n              data-cy=\"statusSelect\"\n              value={filterType}\n              onChange={handleSelectChange}\n            >\n              <option value={FilterTypeEnum.all}>All</option>\n              <option value={FilterTypeEnum.active}>Active</option>\n              <option value={FilterTypeEnum.completed}>Completed</option>\n            </select>\n          </span>\n        </p>\n\n        <p className=\"control is-expanded has-icons-left has-icons-right\">\n          <input\n            data-cy=\"searchInput\"\n            type=\"text\"\n            className=\"input\"\n            placeholder=\"Search...\"\n            value={query}\n            onChange={handleSearch}\n          />\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-magnifying-glass\" />\n          </span>\n\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {\n              query && (\n                // eslint-disable-next-line jsx-a11y/control-has-associated-label\n                <button\n                  data-cy=\"clearSearchButton\"\n                  type=\"button\"\n                  className=\"delete\"\n                  onClick={onClean}\n                />\n              )\n            }\n          </span>\n        </p>\n      </form>\n    );\n  },\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import {\n  useState,\n  useEffect,\n  memo,\n  FC,\n} from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ninterface Props {\n  selectedTodo: Todo | null,\n  onClose: () => void,\n}\n\nexport const TodoModal: FC<Props> = memo(\n  ({ selectedTodo, onClose }) => {\n    const {\n      id,\n      title,\n      completed,\n      userId,\n    } = selectedTodo as Todo;\n\n    const [isUserLoading, setLoadingStatus] = useState(true);\n    const [user, setUser] = useState<User | null>(null);\n    const [errorMessage, setErrorMessage] = useState('');\n\n    useEffect(() => {\n      getUser(userId)\n        .then(userFromServer => {\n          setUser(userFromServer);\n        })\n        .catch(() => setErrorMessage('something went wrong, try later'))\n        .finally(() => setLoadingStatus(false));\n    }, []);\n\n    return (\n      <div className=\"modal is-active\" data-cy=\"modal\">\n        <div className=\"modal-background\" />\n\n        {\n          isUserLoading && <Loader />\n        }\n\n        {\n          !!user && (\n            <div className=\"modal-card\">\n              <header className=\"modal-card-head\">\n                <div\n                  className=\"modal-card-title has-text-weight-medium\"\n                  data-cy=\"modal-header\"\n                >\n                  {`Todo #${id}`}\n                </div>\n\n                {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n                <button\n                  type=\"button\"\n                  className=\"delete\"\n                  data-cy=\"modal-close\"\n                  onClick={onClose}\n                />\n              </header>\n\n              <div className=\"modal-card-body\">\n                <p className=\"block\" data-cy=\"modal-title\">\n                  {title}\n                </p>\n\n                <p className=\"block\" data-cy=\"modal-user\">\n                  {\n                    completed\n                      ? <strong className=\"has-text-success\">Done</strong>\n                      : <strong className=\"has-text-danger\">Planned</strong>\n                  }\n\n                  {' by '}\n\n                  <a href={`mailto:${user?.email}`}>\n                    {user?.name}\n                  </a>\n                </p>\n              </div>\n            </div>\n          )\n        }\n\n        {\n          errorMessage && (\n            <div className=\"modal-card\">\n\n              <header className=\"modal-card-head\">\n                <h1\n                  className=\"title\"\n                >\n                  {errorMessage}\n                </h1>\n\n                {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n                <button\n                  type=\"button\"\n                  className=\"delete\"\n                  data-cy=\"modal-close\"\n                  onClick={onClose}\n                />\n              </header>\n\n            </div>\n          )\n        }\n      </div>\n    );\n  },\n);\n","import {\n  FC,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport debounce from 'lodash.debounce';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { FilterTypeEnum } from './types/filterType';\n\nexport const App: FC = () => {\n  const [todosFromServer, setTodosFromServer] = useState<Todo[]>([]);\n  const [areUsersLoaded, setAreUsersLoaded] = useState(false);\n  const [query, setQuery] = useState('');\n  const [appliedQuery, setAppliedQuery] = useState('');\n  const [selectedTodoId, setSelectedTodoId] = useState<number>(0);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [filterType, setFilterType] = useState<FilterTypeEnum>(\n    FilterTypeEnum.all,\n  );\n\n  useEffect(() => {\n    setErrorMessage('');\n    getTodos()\n      .then(todos => {\n        setTodosFromServer(todos);\n        setAreUsersLoaded(true);\n      })\n      .catch(() => {\n        setErrorMessage('something went wrong, try to reload the page');\n      })\n      .finally(() => setAreUsersLoaded(true));\n  }, []);\n\n  const debouncedSetAppliedQuery = useCallback(\n    debounce(setAppliedQuery, 300),\n    [],\n  );\n\n  const applyQuery = (queryToApply: string) => {\n    setQuery(queryToApply);\n    debouncedSetAppliedQuery(queryToApply);\n  };\n\n  const handleClean = useCallback(() => {\n    setQuery('');\n    debouncedSetAppliedQuery('');\n  }, []);\n\n  const handleTodoSelect = useCallback((id: number) => {\n    setSelectedTodoId(id);\n  }, [todosFromServer]);\n\n  const getSelectedTodo = useCallback((id: number) => (\n    todosFromServer.find(todo => todo.id === id) || null\n  ), [selectedTodoId]);\n\n  const handleTodoClose = useCallback(() => {\n    setSelectedTodoId(0);\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    if (!filterType) {\n      return todosFromServer;\n    }\n\n    return todosFromServer.filter(todo => {\n      const condition1 = todo.title\n        .toLowerCase()\n        .includes(appliedQuery.toLowerCase());\n\n      switch (filterType) {\n        case FilterTypeEnum.all:\n          return condition1;\n        case FilterTypeEnum.active:\n          return condition1 && !todo.completed;\n        case FilterTypeEnum.completed:\n          return condition1 && todo.completed;\n        default:\n          return true;\n      }\n    });\n  }, [todosFromServer, filterType, appliedQuery]);\n\n  const shouldTodosBeRendered = areUsersLoaded && !errorMessage;\n\n  const shouldErrorMessageBeRendered = errorMessage;\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filterType={filterType}\n                query={query}\n                onFilter={setFilterType}\n                onSearch={applyQuery}\n                onClean={handleClean}\n              />\n            </div>\n\n            <div className=\"block\">\n              {\n                !areUsersLoaded && (\n                  <Loader />\n                )\n              }\n\n              {\n                shouldTodosBeRendered && (\n                  <TodoList\n                    todos={visibleTodos}\n                    onSelect={handleTodoSelect}\n                    selectedId={selectedTodoId}\n                  />\n                )\n              }\n\n              {\n                shouldErrorMessageBeRendered && (\n                  <h1\n                    className=\"title\"\n                    style={{ textAlign: 'center', color: 'red' }}\n                  >\n                    {errorMessage}\n                  </h1>\n                )\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {!!selectedTodoId && (\n        <TodoModal\n          selectedTodo={getSelectedTodo(selectedTodoId)}\n          onClose={handleTodoClose}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}